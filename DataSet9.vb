'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DataSet9
    Inherits DataSet
    
    Private tableDENWER As DENWERDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("DENWER")) Is Nothing) Then
                Me.Tables.Add(New DENWERDataTable(ds.Tables("DENWER")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DENWER As DENWERDataTable
        Get
            Return Me.tableDENWER
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DataSet9 = CType(MyBase.Clone,DataSet9)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("DENWER")) Is Nothing) Then
            Me.Tables.Add(New DENWERDataTable(ds.Tables("DENWER")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableDENWER = CType(Me.Tables("DENWER"),DENWERDataTable)
        If (Not (Me.tableDENWER) Is Nothing) Then
            Me.tableDENWER.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DataSet9"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DataSet9.xsd"
        Me.Locale = New System.Globalization.CultureInfo("ru-RU")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableDENWER = New DENWERDataTable
        Me.Tables.Add(Me.tableDENWER)
    End Sub
    
    Private Function ShouldSerializeDENWER() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub DENWERRowChangeEventHandler(ByVal sender As Object, ByVal e As DENWERRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DENWERDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnChrome As DataColumn
        
        Private columnFireFox As DataColumn
        
        Private columnid_строка As DataColumn
        
        Private columnIExplorer As DataColumn
        
        Private columnOpera As DataColumn
        
        Private columnphpMyAdminDenwer As DataColumn
        
        Private columnSafari As DataColumn
        
        Private columnПутьDenwer As DataColumn
        
        Private columnХостDenwer As DataColumn
        
        Friend Sub New()
            MyBase.New("DENWER")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ChromeColumn As DataColumn
            Get
                Return Me.columnChrome
            End Get
        End Property
        
        Friend ReadOnly Property FireFoxColumn As DataColumn
            Get
                Return Me.columnFireFox
            End Get
        End Property
        
        Friend ReadOnly Property id_строкаColumn As DataColumn
            Get
                Return Me.columnid_строка
            End Get
        End Property
        
        Friend ReadOnly Property IExplorerColumn As DataColumn
            Get
                Return Me.columnIExplorer
            End Get
        End Property
        
        Friend ReadOnly Property OperaColumn As DataColumn
            Get
                Return Me.columnOpera
            End Get
        End Property
        
        Friend ReadOnly Property phpMyAdminDenwerColumn As DataColumn
            Get
                Return Me.columnphpMyAdminDenwer
            End Get
        End Property
        
        Friend ReadOnly Property SafariColumn As DataColumn
            Get
                Return Me.columnSafari
            End Get
        End Property
        
        Friend ReadOnly Property ПутьDenwerColumn As DataColumn
            Get
                Return Me.columnПутьDenwer
            End Get
        End Property
        
        Friend ReadOnly Property ХостDenwerColumn As DataColumn
            Get
                Return Me.columnХостDenwer
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DENWERRow
            Get
                Return CType(Me.Rows(index),DENWERRow)
            End Get
        End Property
        
        Public Event DENWERRowChanged As DENWERRowChangeEventHandler
        
        Public Event DENWERRowChanging As DENWERRowChangeEventHandler
        
        Public Event DENWERRowDeleted As DENWERRowChangeEventHandler
        
        Public Event DENWERRowDeleting As DENWERRowChangeEventHandler
        
        Public Overloads Sub AddDENWERRow(ByVal row As DENWERRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDENWERRow(ByVal Chrome As String, ByVal FireFox As String, ByVal IExplorer As String, ByVal Opera As String, ByVal phpMyAdminDenwer As String, ByVal Safari As String, ByVal ПутьDenwer As String, ByVal ХостDenwer As String) As DENWERRow
            Dim rowDENWERRow As DENWERRow = CType(Me.NewRow,DENWERRow)
            rowDENWERRow.ItemArray = New Object() {Chrome, FireFox, Nothing, IExplorer, Opera, phpMyAdminDenwer, Safari, ПутьDenwer, ХостDenwer}
            Me.Rows.Add(rowDENWERRow)
            Return rowDENWERRow
        End Function
        
        Public Function FindByid_строка(ByVal id_строка As Integer) As DENWERRow
            Return CType(Me.Rows.Find(New Object() {id_строка}),DENWERRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DENWERDataTable = CType(MyBase.Clone,DENWERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DENWERDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnChrome = Me.Columns("Chrome")
            Me.columnFireFox = Me.Columns("FireFox")
            Me.columnid_строка = Me.Columns("id_строка")
            Me.columnIExplorer = Me.Columns("IExplorer")
            Me.columnOpera = Me.Columns("Opera")
            Me.columnphpMyAdminDenwer = Me.Columns("phpMyAdminDenwer")
            Me.columnSafari = Me.Columns("Safari")
            Me.columnПутьDenwer = Me.Columns("ПутьDenwer")
            Me.columnХостDenwer = Me.Columns("ХостDenwer")
        End Sub
        
        Private Sub InitClass()
            Me.columnChrome = New DataColumn("Chrome", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChrome)
            Me.columnFireFox = New DataColumn("FireFox", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFireFox)
            Me.columnid_строка = New DataColumn("id_строка", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_строка)
            Me.columnIExplorer = New DataColumn("IExplorer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIExplorer)
            Me.columnOpera = New DataColumn("Opera", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOpera)
            Me.columnphpMyAdminDenwer = New DataColumn("phpMyAdminDenwer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnphpMyAdminDenwer)
            Me.columnSafari = New DataColumn("Safari", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSafari)
            Me.columnПутьDenwer = New DataColumn("ПутьDenwer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnПутьDenwer)
            Me.columnХостDenwer = New DataColumn("ХостDenwer", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnХостDenwer)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnid_строка}, true))
            Me.columnid_строка.AutoIncrement = true
            Me.columnid_строка.AllowDBNull = false
            Me.columnid_строка.Unique = true
        End Sub
        
        Public Function NewDENWERRow() As DENWERRow
            Return CType(Me.NewRow,DENWERRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DENWERRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DENWERRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DENWERRowChangedEvent) Is Nothing) Then
                RaiseEvent DENWERRowChanged(Me, New DENWERRowChangeEvent(CType(e.Row,DENWERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DENWERRowChangingEvent) Is Nothing) Then
                RaiseEvent DENWERRowChanging(Me, New DENWERRowChangeEvent(CType(e.Row,DENWERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DENWERRowDeletedEvent) Is Nothing) Then
                RaiseEvent DENWERRowDeleted(Me, New DENWERRowChangeEvent(CType(e.Row,DENWERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DENWERRowDeletingEvent) Is Nothing) Then
                RaiseEvent DENWERRowDeleting(Me, New DENWERRowChangeEvent(CType(e.Row,DENWERRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDENWERRow(ByVal row As DENWERRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DENWERRow
        Inherits DataRow
        
        Private tableDENWER As DENWERDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDENWER = CType(Me.Table,DENWERDataTable)
        End Sub
        
        Public Property Chrome As String
            Get
                Try 
                    Return CType(Me(Me.tableDENWER.ChromeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Невозможно получить значение, т.к. оно является DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDENWER.ChromeColumn) = value
            End Set
        End Property
        
        Public Property FireFox As String
            Get
                Try 
                    Return CType(Me(Me.tableDENWER.FireFoxColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Невозможно получить значение, т.к. оно является DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDENWER.FireFoxColumn) = value
            End Set
        End Property
        
        Public Property id_строка As Integer
            Get
                Return CType(Me(Me.tableDENWER.id_строкаColumn),Integer)
            End Get
            Set
                Me(Me.tableDENWER.id_строкаColumn) = value
            End Set
        End Property
        
        Public Property IExplorer As String
            Get
                Try 
                    Return CType(Me(Me.tableDENWER.IExplorerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Невозможно получить значение, т.к. оно является DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDENWER.IExplorerColumn) = value
            End Set
        End Property
        
        Public Property Opera As String
            Get
                Try 
                    Return CType(Me(Me.tableDENWER.OperaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Невозможно получить значение, т.к. оно является DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDENWER.OperaColumn) = value
            End Set
        End Property
        
        Public Property phpMyAdminDenwer As String
            Get
                Try 
                    Return CType(Me(Me.tableDENWER.phpMyAdminDenwerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Невозможно получить значение, т.к. оно является DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDENWER.phpMyAdminDenwerColumn) = value
            End Set
        End Property
        
        Public Property Safari As String
            Get
                Try 
                    Return CType(Me(Me.tableDENWER.SafariColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Невозможно получить значение, т.к. оно является DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDENWER.SafariColumn) = value
            End Set
        End Property
        
        Public Property ПутьDenwer As String
            Get
                Try 
                    Return CType(Me(Me.tableDENWER.ПутьDenwerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Невозможно получить значение, т.к. оно является DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDENWER.ПутьDenwerColumn) = value
            End Set
        End Property
        
        Public Property ХостDenwer As String
            Get
                Try 
                    Return CType(Me(Me.tableDENWER.ХостDenwerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Невозможно получить значение, т.к. оно является DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDENWER.ХостDenwerColumn) = value
            End Set
        End Property
        
        Public Function IsChromeNull() As Boolean
            Return Me.IsNull(Me.tableDENWER.ChromeColumn)
        End Function
        
        Public Sub SetChromeNull()
            Me(Me.tableDENWER.ChromeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFireFoxNull() As Boolean
            Return Me.IsNull(Me.tableDENWER.FireFoxColumn)
        End Function
        
        Public Sub SetFireFoxNull()
            Me(Me.tableDENWER.FireFoxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIExplorerNull() As Boolean
            Return Me.IsNull(Me.tableDENWER.IExplorerColumn)
        End Function
        
        Public Sub SetIExplorerNull()
            Me(Me.tableDENWER.IExplorerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOperaNull() As Boolean
            Return Me.IsNull(Me.tableDENWER.OperaColumn)
        End Function
        
        Public Sub SetOperaNull()
            Me(Me.tableDENWER.OperaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsphpMyAdminDenwerNull() As Boolean
            Return Me.IsNull(Me.tableDENWER.phpMyAdminDenwerColumn)
        End Function
        
        Public Sub SetphpMyAdminDenwerNull()
            Me(Me.tableDENWER.phpMyAdminDenwerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSafariNull() As Boolean
            Return Me.IsNull(Me.tableDENWER.SafariColumn)
        End Function
        
        Public Sub SetSafariNull()
            Me(Me.tableDENWER.SafariColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsПутьDenwerNull() As Boolean
            Return Me.IsNull(Me.tableDENWER.ПутьDenwerColumn)
        End Function
        
        Public Sub SetПутьDenwerNull()
            Me(Me.tableDENWER.ПутьDenwerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsХостDenwerNull() As Boolean
            Return Me.IsNull(Me.tableDENWER.ХостDenwerColumn)
        End Function
        
        Public Sub SetХостDenwerNull()
            Me(Me.tableDENWER.ХостDenwerColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DENWERRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DENWERRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DENWERRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DENWERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
