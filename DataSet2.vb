'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DataSet2
    Inherits DataSet
    
    Private tableСпецСимволы As СпецСимволыDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("СпецСимволы")) Is Nothing) Then
                Me.Tables.Add(New СпецСимволыDataTable(ds.Tables("СпецСимволы")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property СпецСимволы As СпецСимволыDataTable
        Get
            Return Me.tableСпецСимволы
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DataSet2 = CType(MyBase.Clone,DataSet2)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("СпецСимволы")) Is Nothing) Then
            Me.Tables.Add(New СпецСимволыDataTable(ds.Tables("СпецСимволы")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableСпецСимволы = CType(Me.Tables("СпецСимволы"),СпецСимволыDataTable)
        If (Not (Me.tableСпецСимволы) Is Nothing) Then
            Me.tableСпецСимволы.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DataSet2"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DataSet2.xsd"
        Me.Locale = New System.Globalization.CultureInfo("ru-RU")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableСпецСимволы = New СпецСимволыDataTable
        Me.Tables.Add(Me.tableСпецСимволы)
    End Sub
    
    Private Function ShouldSerializeСпецСимволы() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub СпецСимволыRowChangeEventHandler(ByVal sender As Object, ByVal e As СпецСимволыRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class СпецСимволыDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid_строка As DataColumn
        
        Private columnСпецСимвол As DataColumn
        
        Private columnЦвет As DataColumn
        
        Friend Sub New()
            MyBase.New("СпецСимволы")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property id_строкаColumn As DataColumn
            Get
                Return Me.columnid_строка
            End Get
        End Property
        
        Friend ReadOnly Property СпецСимволColumn As DataColumn
            Get
                Return Me.columnСпецСимвол
            End Get
        End Property
        
        Friend ReadOnly Property ЦветColumn As DataColumn
            Get
                Return Me.columnЦвет
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As СпецСимволыRow
            Get
                Return CType(Me.Rows(index),СпецСимволыRow)
            End Get
        End Property
        
        Public Event СпецСимволыRowChanged As СпецСимволыRowChangeEventHandler
        
        Public Event СпецСимволыRowChanging As СпецСимволыRowChangeEventHandler
        
        Public Event СпецСимволыRowDeleted As СпецСимволыRowChangeEventHandler
        
        Public Event СпецСимволыRowDeleting As СпецСимволыRowChangeEventHandler
        
        Public Overloads Sub AddСпецСимволыRow(ByVal row As СпецСимволыRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddСпецСимволыRow(ByVal СпецСимвол As String, ByVal Цвет As Integer) As СпецСимволыRow
            Dim rowСпецСимволыRow As СпецСимволыRow = CType(Me.NewRow,СпецСимволыRow)
            rowСпецСимволыRow.ItemArray = New Object() {Nothing, СпецСимвол, Цвет}
            Me.Rows.Add(rowСпецСимволыRow)
            Return rowСпецСимволыRow
        End Function
        
        Public Function FindByid_строка(ByVal id_строка As Integer) As СпецСимволыRow
            Return CType(Me.Rows.Find(New Object() {id_строка}),СпецСимволыRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As СпецСимволыDataTable = CType(MyBase.Clone,СпецСимволыDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New СпецСимволыDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid_строка = Me.Columns("id_строка")
            Me.columnСпецСимвол = Me.Columns("СпецСимвол")
            Me.columnЦвет = Me.Columns("Цвет")
        End Sub
        
        Private Sub InitClass()
            Me.columnid_строка = New DataColumn("id_строка", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid_строка)
            Me.columnСпецСимвол = New DataColumn("СпецСимвол", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnСпецСимвол)
            Me.columnЦвет = New DataColumn("Цвет", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnЦвет)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnid_строка}, true))
            Me.columnid_строка.AutoIncrement = true
            Me.columnid_строка.AllowDBNull = false
            Me.columnid_строка.Unique = true
        End Sub
        
        Public Function NewСпецСимволыRow() As СпецСимволыRow
            Return CType(Me.NewRow,СпецСимволыRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New СпецСимволыRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(СпецСимволыRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.СпецСимволыRowChangedEvent) Is Nothing) Then
                RaiseEvent СпецСимволыRowChanged(Me, New СпецСимволыRowChangeEvent(CType(e.Row,СпецСимволыRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.СпецСимволыRowChangingEvent) Is Nothing) Then
                RaiseEvent СпецСимволыRowChanging(Me, New СпецСимволыRowChangeEvent(CType(e.Row,СпецСимволыRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.СпецСимволыRowDeletedEvent) Is Nothing) Then
                RaiseEvent СпецСимволыRowDeleted(Me, New СпецСимволыRowChangeEvent(CType(e.Row,СпецСимволыRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.СпецСимволыRowDeletingEvent) Is Nothing) Then
                RaiseEvent СпецСимволыRowDeleting(Me, New СпецСимволыRowChangeEvent(CType(e.Row,СпецСимволыRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveСпецСимволыRow(ByVal row As СпецСимволыRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class СпецСимволыRow
        Inherits DataRow
        
        Private tableСпецСимволы As СпецСимволыDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableСпецСимволы = CType(Me.Table,СпецСимволыDataTable)
        End Sub
        
        Public Property id_строка As Integer
            Get
                Return CType(Me(Me.tableСпецСимволы.id_строкаColumn),Integer)
            End Get
            Set
                Me(Me.tableСпецСимволы.id_строкаColumn) = value
            End Set
        End Property
        
        Public Property СпецСимвол As String
            Get
                Try 
                    Return CType(Me(Me.tableСпецСимволы.СпецСимволColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Невозможно получить значение, т.к. оно является DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableСпецСимволы.СпецСимволColumn) = value
            End Set
        End Property
        
        Public Property Цвет As Integer
            Get
                Try 
                    Return CType(Me(Me.tableСпецСимволы.ЦветColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Невозможно получить значение, т.к. оно является DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableСпецСимволы.ЦветColumn) = value
            End Set
        End Property
        
        Public Function IsСпецСимволNull() As Boolean
            Return Me.IsNull(Me.tableСпецСимволы.СпецСимволColumn)
        End Function
        
        Public Sub SetСпецСимволNull()
            Me(Me.tableСпецСимволы.СпецСимволColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsЦветNull() As Boolean
            Return Me.IsNull(Me.tableСпецСимволы.ЦветColumn)
        End Function
        
        Public Sub SetЦветNull()
            Me(Me.tableСпецСимволы.ЦветColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class СпецСимволыRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As СпецСимволыRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As СпецСимволыRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As СпецСимволыRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
